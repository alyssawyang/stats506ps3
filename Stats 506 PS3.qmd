---
title: "Stats 506 PS3"
author: "Alyssa Yang"
format: html
---

GitHub repo link: https://github.com/alyssawyang/stats506ps3

# Problem 1 - Vision
## 1a
```{r}
#| code-fold: true
library(knitr)
library(haven)

# Read in files
vix <- read_xpt("VIX_D.XPT")
demo <- read_xpt("DEMO_D.XPT")

# Merge the two datasets
vision <- data.frame(merge(vix, demo, by = "SEQN"))

# Print total sample size - should be 6980
cat("Total sample size: ", nrow(vision))
```


## 1b
```{r}
#| code-fold: true
# VIQ220 - Glasses/contact lenses worn for distance
# RIDAGEMN - Age in Years

# Rename variable columns
colnames(vision)[colnames(vision) == "VIQ220"] <- "glasses"
colnames(vision)[colnames(vision) == "RIDAGEYR"] <- "age"

# Replace all missing values with NA
vision[vision == "."] <- NA

# Redefine glasses variable
vision$glasses[vision$glasses == 1] <- 0
vision$glasses[vision$glasses == 2] <- 1
vision$glasses[vision$glasses == 9] <- NA

# Remove all NA values for these two variables
vision <- vision[!is.na(vision$age), ]
vision <- vision[!is.na(vision$glasses), ]
```

```{r}
#| code-fold: true
# Convert age in months into age brackets of 10 years
vision$age_brackets <- cut(vision$age, breaks = seq(0, 90, by = 10), right = FALSE, 
                           labels = c("0-9", "10-19", "20-29", "30-39", "40-49", 
                                      "50-59", "60-69", "70-79", "80-89"))

# Compute proportions for each age bracket
proportions <- aggregate(glasses ~ age_brackets, data = vision, FUN = mean)
colnames(proportions) <- c("Age Bracket", "Proportion Wearing Glasses/Contacts")

# Create table of proportions
kable(proportions, caption = "Proportion of Respondents Wearing Glasses/Contacts by Age Bracket")
```


## 1c
```{r}
#| code-fold: true
# RIDRETH1 - Race/Ethnicity
# RIAGENDR - Gender
# INDFMPIR - Family Poverty Income Ratio

suppressMessages(library(pscl)) # For Pseudo-R^2 function

# Rename variable columns
colnames(vision)[colnames(vision) == "RIDRETH1"] <- "race"
colnames(vision)[colnames(vision) == "RIAGENDR"] <- "gender"
colnames(vision)[colnames(vision) == "INDFMPIR"] <- "pir"

# Convert race and gender to factors
vision$race <- as.factor(vision$race)
vision$gender <- as.factor(vision$gender)

# Rename levels of race and gender
levels(vision$race) <- c("Mexican American", "Other Hispanic", "Non-Hispanic White", "Non-Hispanic Black",
                         "Other Race - Including Multi-Racial")
levels(vision$gender) <- c("Male", "Female")
```

```{r}
#| code-fold: true
# Model 1
model1 <- glm(glasses ~ age, data = vision, family = "binomial")

# Find values for the table
odds1 <- exp(coef(model1)) # Convert coefficients from log-odds to odds-ratios
size1 <- length(model1$fitted.values) # Find sample size
pseudo_r2_output <- capture.output(pseudo_r2_1 <- pR2(model1)) # Suppress output of pR2
pseudo_r2_1 <- pseudo_r2_1["McFadden"] # Find pseudo R^2 value
aic1 <- AIC(model1) # Find AIC
```

```{r}
#| code-fold: true
# Remove all NA values for race and gender
vision <- vision[!is.na(vision$race), ]
vision <- vision[!is.na(vision$gender), ]

# Model 2
model2 <- glm(glasses ~ age + race + gender, data = vision, family = "binomial")

# Find values for the table
odds2 <- exp(coef(model2)) # Convert coefficients from log-odds to odds-ratios
size2 <- length(model2$fitted.values) # Find sample size
pseudo_r2_output <- capture.output(pseudo_r2_2 <- pR2(model2)) # Suppress output of pR2
pseudo_r2_2 <- pseudo_r2_2["McFadden"] # Find pseudo R^2 value
aic2 <- AIC(model2) # Find AIC
```

```{r}
#| code-fold: true
# Remove NA values for pir
vision <- vision[!is.na(vision$pir), ]

# Model 3
model3 <- glm(glasses ~ age + race + gender + pir, data = vision, family = "binomial")

# Find values for the table
odds3 <- exp(coef(model3)) # Convert coefficients from log-odds to odds-ratios
size3 <- length(model3$fitted.values) # Find sample size
pseudo_r2_output <- capture.output(pseudo_r2_3 <- pR2(model3)) # Suppress output of pR2
pseudo_r2_3 <- pseudo_r2_3["McFadden"] # Find pseudo R^2 value
aic3 <- AIC(model3) # Find AIC
```

```{r}
#| code-fold: true
# Find the maximum length of the variable names from all models
max_length <- max(length(names(odds1)), length(names(odds2)), length(names(odds3)))

# Create list of variable names
var_names <- c("(Intercept)", "Age", "Other Hispanic", "Non-Hispanic White", "Non-Hispanic Black",
               "Other Race - Including Multi-racial", "Female", "Poverty Income Ratio")

# Create a data frame with the odds ratios
odds <- data.frame(
  Variable = var_names,
  Model1 = c(odds1, rep(NA, max_length - length(odds1))),
  Model2 = c(odds2, rep(NA, max_length - length(odds2))),
  Model3 = odds3
)

# Create a data frame with the statistics
stats <- data.frame(
  Variable = c("Sample Size", "Pseudo RÂ²", "AIC"),
  Model1 = c(size1, pseudo_r2_1, aic1),
  Model2 = c(size2, pseudo_r2_2, aic2),
  Model3 = c(size3, pseudo_r2_3, aic3)
)

# Create a separator data frame for easier readability
separator_row <- data.frame(
  Variable = "-",
  Model1 = "-",
  Model2 = "-",
  Model3 = "-"
)

# Combine data frames together
results <- rbind(odds, separator_row, stats)

# Create the table using kable
kable(results, caption = "Summary of Logistic Regression Models", row.names = FALSE,
      col.names = c("Variable", "Model 1", "Model 2", "Model 3"))
```


## 1d
```{r}
# library(multcomp)

# Extract the coefficient for Females in model 3
# print(summary(model3))
# cat("Odds-Ratio for Females: ", odds3["genderFemale"])
```

<!-- The odds-ratio for females is around 0.5967, and from the summary we can see that the p-value for this coefficient -->


# Problem 2 - Sakila
```{r}
library(DBI)
library(RSQLite)

sakila <- dbConnect(SQLite(), "sakila_master.db")
dbListTables(sakila)

gg <- function(query) {
  dbGetQuery(sakila, query)
}
```


## 2a
```{r}
# What year is the oldest movie from, and how many movies were released in that year?

gg("
SELECT release_year AS year, count(film_id) AS num_movies
  FROM film
 ORDER BY release_year
 LIMIT 1
")
```


## 2b
```{r}
# What genre of movie is the least common in the data, and how many movies are of this genre?

# Extract tables using SQL queries
film_category <- gg("SELECT * FROM film_category")
category <- gg("SELECT * FROM category")

# Find the genre with the least amount of movies
genre_counts <- table(film_category["category_id"])
min_genre <- which.min(genre_counts)

# Match the category_ids to find the name of the genre
genre <- category$name[category["category_id"] == min_genre]

# Find number of movies with this genre
movies <- film_category$film_id[film_category["category_id"] == min_genre]
num_movies <- length(movies)

cat("genre: ", genre, "\nnum_movies: ", num_movies)
```

```{r}
# Single SQL query
gg("
SELECT c.name AS genre, COUNT(f.film_id) AS num_movies
  FROM film_category AS f
 INNER JOIN category AS c ON f.category_id = c.category_id
 GROUP BY f.category_id
 ORDER BY num_movies
 LIMIT 1
")
```


## 2c
```{r}
# Identify which country or countries have exactly 13 customers.

# Extract tables using SQL queries
country <- gg("SELECT * FROM country")
city <- gg("SELECT * FROM city")
address <- gg("SELECT * FROM address")
customer <- gg("SELECT * FROM customer")

# Find cities that customers are from
cities <- address$city_id[match(customer$address_id, address$address_id)]

# Find the countries of each city that customers are from
countries <- city$country_id[match(cities, city$city_id)]

# Create table with frequencies of how many customers are from each country
table <- table(country$country[match(countries, country$country_id)])

# Find countries where frequency = 13
table[table == 13]
```

```{r}
# Single SQL query
gg("
SELECT co.country
  FROM country AS co
 INNER JOIN city AS ci ON co.country_id = ci.country_id
 INNER JOIN address AS a ON a.city_id = ci.city_id
 INNER JOIN customer AS cu ON cu.address_id = a.address_id
 GROUP BY co.country_id
 HAVING COUNT(cu.customer_id) = 13
")
```













